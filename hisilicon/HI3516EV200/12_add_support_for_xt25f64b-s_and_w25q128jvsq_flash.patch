--- a/drivers/mtd/spi-nor/spi-nor.c	2021-03-24 01:13:36.000000000 +0300
+++ b/drivers/mtd/spi-nor/spi-nor.c	2021-03-24 11:02:41.806251817 +0300
@@ -930,7 +930,7 @@
 };
 
 static const struct spi_nor_basic_flash_parameter winbond_params = {
-	.rd_modes		= SNOR_RD_MODES,
+	.rd_modes		= SNOR_EON_RD_MODES,
 	.reads[SNOR_MIDX_SLOW]	= SNOR_OP_READ(0, 0, SPINOR_OP_READ),
 	.reads[SNOR_MIDX_1_1_1]	= SNOR_OP_READ(0, 8, SPINOR_OP_READ_FAST),
 	.reads[SNOR_MIDX_1_1_2]	= SNOR_OP_READ(0, 8, SPINOR_OP_READ_1_1_2),
@@ -938,7 +938,7 @@
 	.reads[SNOR_MIDX_1_1_4]	= SNOR_OP_READ(0, 8, SPINOR_OP_READ_1_1_4),
 	.reads[SNOR_MIDX_1_4_4]	= SNOR_OP_READ(8, 16, SPINOR_OP_READ_1_4_4),
 
-	.wr_modes		= SNOR_WR_MODES,
+	.wr_modes		= SNOR_EON_RD_MODES,
 	.page_programs[SNOR_MIDX_1_1_1]	= SPINOR_OP_PP,
 	.page_programs[SNOR_MIDX_1_1_4]	= SPINOR_OP_PP_1_1_4,
 
@@ -1041,8 +1041,9 @@
 	.erase_types[1]		= SNOR_OP_ERASE_4K(SPINOR_OP_BE_4K),
 };
 
+
 static const struct spi_nor_basic_flash_parameter xtx_params = {
-	.rd_modes		= SNOR_RD_MODES,
+	.rd_modes		= SNOR_EON_RD_MODES,
 	.reads[SNOR_MIDX_SLOW]	= SNOR_OP_READ(0, 0, SPINOR_OP_READ),
 	.reads[SNOR_MIDX_1_1_1]	= SNOR_OP_READ(0, 8, SPINOR_OP_READ_FAST),
 	.reads[SNOR_MIDX_1_1_2]	= SNOR_OP_READ(0, 8, SPINOR_OP_READ_1_1_2),
@@ -1050,7 +1051,7 @@
 	.reads[SNOR_MIDX_1_1_4]	= SNOR_OP_READ(0, 8, SPINOR_OP_READ_1_1_4),
 	.reads[SNOR_MIDX_1_4_4]	= SNOR_OP_READ(0, 24, SPINOR_OP_READ_1_4_4),
 
-	.wr_modes		= SNOR_WR_MODES,
+	.wr_modes		= SNOR_EON_WR_MODES,
 	.page_programs[SNOR_MIDX_1_1_1]	= SPINOR_OP_PP,
 	.page_programs[SNOR_MIDX_1_1_4]	= SPINOR_OP_PP_1_1_4,
 
@@ -1461,7 +1462,7 @@
 	{ "xt25f128b", INFO(0x0b4018, 0, 64 * 1024,  256,
 		SPI_NOR_QUAD_READ), PARAMS(xtx), CLK_MHZ_2X(70) },
 
-	{ "xt25f64b", INFO(0x0b4017, 0, 64 * 1024,  128,
+	{ "xm_xt25f64b-s", INFO(0x0b4017, 0, 64 * 1024,  128,
 		SPI_NOR_QUAD_READ), PARAMS(xtx), CLK_MHZ_2X(70) },
 	{ },
 };
@@ -2046,6 +2047,7 @@
 		nor->level = hisi_bp_to_level(nor, info, BP_NUM_3);
 		break;
 	case SNOR_MFR_WINBOND:
+	case SNOR_MFR_XTX:
 		/* BP bit convert to lock level */
 		if (chipsize <= _16M)
 			nor->level = hisi_bp_to_level(nor, info, BP_NUM_3);
@@ -2206,7 +2208,7 @@
 	 */
 	nor->erase_proto = SNOR_PROTO_1_1_1;
 
-	dev_dbg(nor->dev,
+	dev_info(nor->dev,
 		"(Fast) Read:  opcode=%02Xh, protocol=%03x, mode=%u, wait=%u\n",
 		nor->read_opcode, nor->read_proto,
 		read->num_mode_clocks, read->num_wait_states);
@@ -2442,8 +2444,10 @@
 		/* If we were instantiated by DT, use it */
 		if (of_property_read_bool(np, "m25p,fast-read"))
 			modes->rd_modes |= SNOR_MODE_1_1_1;
-		else
+		else {
+			printk("@spi_nor_scan(), no \"m25p,fast-read\".\n");
 			modes->rd_modes &= ~SNOR_MODE_1_1_1;
+		}
 	} else {
 		/* If we weren't instantiated by DT, default to fast-read */
 		modes->rd_modes |= SNOR_MODE_1_1_1;
@@ -2453,6 +2457,8 @@
 	if (info->flags & SPI_NOR_NO_FR)
 		modes->rd_modes &= ~SNOR_MODE_1_1_1;
 
+	printk("@spi_nor_scan(), modes->rd_modes:0x%x.\n", modes->rd_modes);
+
 	nor->program_opcode = SPINOR_OP_PP;
 
 	/*
@@ -2494,6 +2500,8 @@
 		return -EINVAL;
 	}
 
+	dev_info(dev, "nor->read_opcode[3: Read; 0B: Fast Read; 3B: Dual; BB: Dual IO"
+		"; 6B: Quad; EB: Quad IO]: 0x%x.\n", nor->read_opcode);
 	dev_info(dev, "%s (Chipsize %lld Mbytes, Blocksize %uKiB)\n",
 		info->name, (long long)mtd->size >> 20, mtd->erasesize / 1024);
 
